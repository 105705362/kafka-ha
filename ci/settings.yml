---
meta:
  name:    kafka
  # fly -t ohio-cf login -c https://ci2.starkandwayne.com -n cfcommunity
  target:  ohio-cf
  url:     https://ci2.starkandwayne.com

  initial_version: 1.0.0

  git:
    email:  ((git-commit-email))
    name:   ((git-commit-name))

  aws:
    bucket: (( grab meta.pipeline ))
    access_key: ((aws-cfcommunity-access))
    secret_key: ((aws-cfcommunity-secret))

  github:
    owner:  cloudfoundry-community
    repo:   (( concat meta.name "-boshrelease" ))
    branch: master
    private_key:  ((github-private-key))
    access_token: ((github-access-token))

  bosh:
    target:   ((bosh-lite-environment))
    cacert:   ((bosh-lite-ca-cert))
    username: ((bosh-lite-client))
    password: ((bosh-lite-client-secret))

  slack:
    webhook:  ((slack-webhook))
    icon:     ((slack-logo))
    username: ((slack-username))
    channel: '#bigdata-boshrelease'
    blob_success:  '(( concat "$BUILD_PIPELINE_NAME: New version of $BUILD_JOB_NAME was detected, and updated in master. <" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME| Cut a new release?>" ))'
    blob_failure:  '(( concat "$BUILD_PIPELINE_NAME: :airplane_arriving: <" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Failed to update the blob for $BUILD_JOB_NAME>" ))'

groups:
- name: blobs
  jobs:
  - kafka

jobs:
- name: kafka
  public: true
  plan:
  - aggregate:
    - { get: git }
    - { get: kafka, trigger: true }
  - task: update-blob
    config:
      image_resource:
        type: docker-image
        source:
          repository: (( grab meta.image.name ))
          tag:        (( grab meta.image.tag ))
      platform: linux
      inputs:
      - name: git
      - name: kafka
      outputs:
      - name: pushme
      run:
        path: ./git/ci/scripts/update-blob
      params:
        REPO_ROOT:   git
        REPO_OUT:    pushme
        BLOB_DIR:    kafka
        BLOB_NAME:   kafka
        BLOB_BINARY: kafka*.tgz
        BLOB_URL:    https://archive.apache.org/dist/kafka/
        BLOB_DESTINATION: kafka/kafka_2.12-${VERSION}.tgz
        BLOB_CLEANUP:     kafka/kafka_2.*
        AWS_ACCESS_KEY: (( grab meta.aws.access_key ))
        AWS_SECRET_KEY: (( grab meta.aws.secret_key ))
        BRANCH:         (( grab meta.github.branch ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
  - put: git
    params:
      rebase: true
      repository: pushme/git
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_success ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))

resource_types:
- name: apache-directory-index
  type: docker-image
  source:
    repository: mastertinner/apache-directory-index-resource
    tag: latest

resources:
- name: kafka
  type: apache-directory-index
  source:
    directory: https://archive.apache.org/dist/kafka/
    folder_pattern: $VERSION
    file_pattern: kafka_2.12-$VERSION.tgz
